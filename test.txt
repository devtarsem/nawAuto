let token
    if(req.headers.authorization && req.headers.authorization.startsWith('Bearer')){
        token = await req.headers.authorization.split(' ')[1]
        console.log(token)
    }else if(req.cookies.jwt){
        token = req.cookies.jwt
    }

    if(!token){
        return next(new appError('your are not logged in , please login first!'))
    }

    // step-2 taking token from the header and secret from the environment file and create the test signature and fetching the payload(id)
    const decoded = await promisify(jwt.verify)(token, process.env.SECRET_JWT_STRING)

    // checking the user from database by the id comes from the payload
    const freshUser = await User.findById(decoded.id)
    console.log(freshUser)
    if(!freshUser){
        return next(new appError('the user belonging to this token is not longer exists' ,401))
    }

    // checking that the user changes the password after taking the token
    if(await freshUser.passwordChangedAt(decoded.iat)){
        return next(new appError('you are recently logged out please login again!'))
    }

    // if all done now we here providing all the access to the user
    req.user = freshUser
    console.log(req.user)
    next()